import { ToastContainer, toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css';
import React, { Component, useState } from 'react';
import './logonMain.css';
import axios from 'axios';
import { useEffect } from 'react';
import { HiOutlineInformationCircle } from "react-icons/hi";
import Swal from 'sweetalert2';

const LogonMypage = (props) => {
    const [name, setName] = useState('');
    const [moodData, setMoodData] = useState([]);

    // ÏÑúÎ≤ÑÏóêÏÑú Ïù¥Î¶Ñ Î∞õÏïÑÏò§Í∏∞ 
    useEffect(() => {
        axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/comon/logon/name`)
            .then((res) => {
                setName(res.data);
                props.editingTitle();
            })
            .catch(error => {
                console.log(error);
            });
    }, []);

    // Ïù¥Î¶Ñ ÏàòÏ†ï 
    const handlerChange = (e) => { setName(e); props.setName(e); };

    //[++ÏàòÏ†ïÌõÑ Ìï∏Îì§Îü¨++] { Ìï∏Îì§Îü¨ }Ìè¨Ïª§Ïä§ ÏïÑÏõÉ ÎêòÎ©¥ putÏúºÎ°ú ÏûÖÎ†•ÎêòÍ≤å updateGoal apiÏöîÏ≤≠ ÌïÑÏöî
    //Ìè¨Ïª§Ïä§ ÏïÑÏõÉÏùÄ onBlur Ïù¥Î≤§Ìä∏Î•º ÏÇ¨Ïö© (id: goalId, e: e.target.value)
    const handlerInputFocusOut = async (e) => {
        // Ïù¥Î¶ÑÏù¥ 5Í∏ÄÏûê Ïù¥ÌïòÏù∏ Í≤ΩÏö∞ÏóêÎßå ÏàòÏ†ï ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
        if (e.length <= 5) {
            //name ÎÇ¥Ïö© Ï§ëÏóê Î∞õÏïÑÏò® idÏôÄ ÏùºÏπòÌïòÎäî Í∞ùÏ≤¥Î•º ÏàòÏ†ï Î∞òÏòÅ
            let update = [...name];
            const index = update.findIndex(item => item.nameId === 1);
            update[index] = { ...update[index], nameTitle: e };

            //ÏÑúÎ≤ÑÏóê Î≥¥ÎÇº RequestBody Îç∞Ïù¥ÌÑ∞ ÏßÄÏ†ï
            const data = {
                nameId: 1,
                nameTitle: name
            };

            //ÏÑúÎ≤ÑÏóê putÏúºÎ°ú ÏàòÏ†ï ÏöîÏ≤≠
            axios.put(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/comon/logon/name`, data)
                .then(response => {
                    if (response.data === 1) {
                        showToastMessage();
                        props.setName(update);
                    } else {
                        console.log('ÏàòÏ†ïÏã§Ìå®');
                        return;
                    }
                }).catch(error => console.log(error));
        } else {
            // Ïù¥Î¶ÑÏù¥ 6Í∏ÄÏûê Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞ alert Ï∞Ω ÎùÑÏö∞Í∏∞
            showFailToastMessage();
        }
    };

    // ÌÜ†Ïä§Ìä∏ Ïª§Ïä§ÌÖÄ
    const showToastMessage = () => {
        toast('ü¶ã Ïù¥Î¶ÑÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!', {
            position: "top-left",
            autoClose: 800,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "light",
        });
    };

    const showFailToastMessage = () => {
        toast('Ïù¥Î¶ÑÏùÄ 5Í∏ÄÏûê Ïù¥ÌïòÎ°úÎßå ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', {
            position: "top-left",
            autoClose: 800,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "light",
            onClose: () => {
                window.location.reload();
            }
        });
    };

    // Î¨¥Îìú Ïπ¥Ïö¥Ìä∏ 
    useEffect(() => {
        // ÏÑúÎ≤ÑÏóêÏÑú mood Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        axios.get(`http://${process.env.REACT_APP_IP}:${process.env.REACT_APP_PORT}/api/comon/logon/${props.day}`)
            .then(response => {
                // mood_id Í∞íÎßå Ï∂îÏ∂úÌïòÏó¨ ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ ÏÉùÏÑ±
                const moodId = response.data.map(item => item.moodId);
                setMoodData(moodId);
            })
            .catch(error => {
                console.log(error);
            });
    }, [props.day]);

    // Î¨¥Îìú Ïπ¥Ïö¥Ìä∏ Ïãù Ï†ÄÏû•
    const totalCount = moodData.length;
    const count1 = moodData.filter((id) => id === 1).length;
    const count2 = moodData.filter((id) => id === 2).length;
    const count3 = moodData.filter((id) => id === 3).length;
    const count4 = moodData.filter((id) => id === 4).length;
    const count5 = moodData.filter((id) => id === 5).length;

    return (
        <>
            <ToastContainer />
            <div className='main-container'>
                <div className='mypage'>
                    <div className='myName-box'>
                        {props.isEditing ?

                            <input type="text"
                                className="editname"
                                value={name}
                                onBlur={(e) => handlerInputFocusOut(e.target.value)}
                                onChange={e => handlerChange(e.target.value)} placeholder="" />

                            :
                            <input type="text"
                                className="editname"
                                value={name}
                                onBlur={(e) => handlerInputFocusOut(e.target.value)}
                                onChange={e => handlerChange(e.target.value)} placeholder="" readOnly />
                        }
                        <div className='infoTip-box'>
                            <HiOutlineInformationCircle id='name-infoTip'
                                title='Í∏ÄÏûêÎ•º ÌÅ¥Î¶≠Ìï¥ Î∞îÎ°ú Ïù¥Î¶ÑÏùÑ ÏàòÏ†ï Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                                Îã®, Ïù¥Î¶ÑÏùÄ 5Í∏ÄÏûê Ïù¥ÌïòÎ°ú ÏÑ§Ï†ï Í∞ÄÎä•ÌïòÎ©∞ Î©îÏù∏ÌéòÏù¥ÏßÄÏóêÏÑúÎßå ÏàòÏ†ï Í∞ÄÎä•Ìï©ÎãàÎã§.' />
                        </div>
                        <span className='my-title'>Ïùò ÌïòÎ£®‚úø'‚ó°'‚úø</span>
                    </div>

                    <div className='myProfilImg'></div>

                    <div className='count-box'>
                        <h1>ÎÇ¥Í∞Ä ÏåìÏùÄ Í∏∞Î°ù</h1> <br /> <p className='total-count'>{totalCount}</p>
                        <div className='mood-box'>
                            <div className='mood_1'></div> <p>{count1}</p>
                        </div>
                        <div className='mood-box'>
                            <div className='mood_2'></div> <p>{count2}</p>
                        </div>
                        <div className='mood-box'>
                            <div className='mood_3'></div> <p>{count3}</p>
                        </div>
                        <div className='mood-box'>
                            <div className='mood_4'></div> <p>{count4}</p>
                        </div>
                        <div className='mood-box'>
                            <div className='mood_5'></div> <p>{count5}</p>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );

};
export default React.memo(LogonMypage);